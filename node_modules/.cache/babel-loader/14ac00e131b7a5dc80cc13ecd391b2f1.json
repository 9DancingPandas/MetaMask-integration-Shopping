{"ast":null,"code":"var _jsxFileName = \"/Users/kailashrajagopal/Downloads/react-shopping-cart-context-with-reducer-master/src/context/TransactionContext.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport { contractABI, contractAddress } from '../utils/constants';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TransactionContext = /*#__PURE__*/React.createContext();\nconst {\n  ethereum\n} = window;\n\nconst getEthereumContract = () => {\n  const provider = new ethers.providers.Web3Provider(ethereum);\n  const signer = provider.getSigner();\n  const transactionContract = new ethers.Contract(contractAddress, contractABI, signer);\n  console.log({\n    provider,\n    signer,\n    transactionContract\n  });\n};\n\nexport const TransactionProvier = ({\n  children\n}) => {\n  _s();\n\n  const checkIfWalletIsConnected = async () => {\n    if (!ethereum) return alert(\"Please install MetaMask\");\n    const accounts = await ethereum.request({\n      method: 'eth_accounts'\n    });\n    console.log(accounts);\n  };\n\n  const connectWallet = async () => {\n    try {\n      if (!ethereum) return alert(\"Please install MetaMask\");\n      const accounts = await ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n    } catch (error) {}\n  };\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(TransactionContext.Provider, {\n    value: {},\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n};\n\n_s(TransactionProvier, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = TransactionProvier;\n\nvar _c;\n\n$RefreshReg$(_c, \"TransactionProvier\");","map":{"version":3,"sources":["/Users/kailashrajagopal/Downloads/react-shopping-cart-context-with-reducer-master/src/context/TransactionContext.js"],"names":["React","useState","useEffect","ethers","contractABI","contractAddress","TransactionContext","createContext","ethereum","window","getEthereumContract","provider","providers","Web3Provider","signer","getSigner","transactionContract","Contract","console","log","TransactionProvier","children","checkIfWalletIsConnected","alert","accounts","request","method","connectWallet","error"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,SAAQC,MAAR,QAAqB,QAArB;AAEA,SAASC,WAAT,EAAsBC,eAAtB,QAA4C,oBAA5C;;AAEA,OAAO,MAAMC,kBAAkB,gBAAGN,KAAK,CAACO,aAAN,EAA3B;AAEP,MAAM;AAAEC,EAAAA;AAAF,IAAeC,MAArB;;AAEA,MAAMC,mBAAmB,GAAG,MAAM;AAC9B,QAAMC,QAAQ,GAAG,IAAIR,MAAM,CAACS,SAAP,CAAiBC,YAArB,CAAkCL,QAAlC,CAAjB;AACA,QAAMM,MAAM,GAAGH,QAAQ,CAACI,SAAT,EAAf;AACA,QAAMC,mBAAmB,GAAG,IAAIb,MAAM,CAACc,QAAX,CAAoBZ,eAApB,EAAqCD,WAArC,EAAkDU,MAAlD,CAA5B;AAEAI,EAAAA,OAAO,CAACC,GAAR,CAAY;AAACR,IAAAA,QAAD;AAAWG,IAAAA,MAAX;AAAmBE,IAAAA;AAAnB,GAAZ;AACH,CAND;;AAQA,OAAO,MAAMI,kBAAkB,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAgB;AAAA;;AAE9C,QAAMC,wBAAwB,GAAG,YAAY;AACzC,QAAG,CAACd,QAAJ,EAAc,OAAOe,KAAK,CAAC,yBAAD,CAAZ;AAEd,UAAMC,QAAQ,GAAG,MAAMhB,QAAQ,CAACiB,OAAT,CAAiB;AAACC,MAAAA,MAAM,EAAG;AAAV,KAAjB,CAAvB;AACAR,IAAAA,OAAO,CAACC,GAAR,CAAYK,QAAZ;AACH,GALD;;AAOA,QAAMG,aAAa,GAAG,YAAY;AAC9B,QAAI;AACA,UAAG,CAACnB,QAAJ,EAAc,OAAOe,KAAK,CAAC,yBAAD,CAAZ;AACd,YAAMC,QAAQ,GAAG,MAAMhB,QAAQ,CAACiB,OAAT,CAAiB;AAACC,QAAAA,MAAM,EAAG;AAAV,OAAjB,CAAvB;AAEH,KAJD,CAIE,OAAOE,KAAP,EAAc,CAEf;AACJ,GARD;;AAUA1B,EAAAA,SAAS,CAAC,MAAM;AACZoB,IAAAA,wBAAwB;AAE3B,GAHQ,EAGN,EAHM,CAAT;AAKA,sBACI,QAAC,kBAAD,CAAoB,QAApB;AAA6B,IAAA,KAAK,EAAG,EAArC;AAAA,cACKD;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CA7BM;;GAAMD,kB;;KAAAA,kB","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport {ethers} from 'ethers';\n\nimport { contractABI, contractAddress} from '../utils/constants';\n\nexport const TransactionContext = React.createContext();\n\nconst { ethereum } = window;\n\nconst getEthereumContract = () => {\n    const provider = new ethers.providers.Web3Provider(ethereum);\n    const signer = provider.getSigner();\n    const transactionContract = new ethers.Contract(contractAddress, contractABI, signer);\n\n    console.log({provider, signer, transactionContract});\n}\n\nexport const TransactionProvier = ({children}) => {\n\n    const checkIfWalletIsConnected = async () => {\n        if(!ethereum) return alert(\"Please install MetaMask\");\n\n        const accounts = await ethereum.request({method : 'eth_accounts'});\n        console.log(accounts);\n    }\n\n    const connectWallet = async () => {\n        try {\n            if(!ethereum) return alert(\"Please install MetaMask\");\n            const accounts = await ethereum.request({method : 'eth_requestAccounts'});\n            \n        } catch (error) {\n            \n        }\n    }\n\n    useEffect(() => {\n        checkIfWalletIsConnected();\n\n    }, [] )\n\n    return (\n        <TransactionContext.Provider value= {{}}>\n            {children}\n        </TransactionContext.Provider>\n    )\n}"]},"metadata":{},"sourceType":"module"}